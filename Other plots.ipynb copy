{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "165d9596-d1f6-401f-9679-ef9995b1b323",
   "metadata": {},
   "source": [
    "# Combined Boxplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "87fe0ea4-d2e6-46b9-aefe-76434d2bb4fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Set style and context\n",
    "sns.set_style(\"whitegrid\")\n",
    "sns.set_context(\"talk\", font_scale=1.2)\n",
    "# sns.set_palette(\"Set2\")\n",
    "\n",
    "# Combine all DataFrames (same as your code)\n",
    "dfs = [theta_35C_01M, theta_35C_25M, theta_35C_5M, theta_35C_75M, theta_35C_1M]\n",
    "columns = [\"0.1M\", \"0.25M\", \"0.5M\", \"0.75M\", \"1.0M\"]\n",
    "\n",
    "all_dfs = []\n",
    "\n",
    "for i, df in enumerate(dfs):\n",
    "    temp_df = pd.concat([\n",
    "        pd.DataFrame({'angle_value': df['θ1'], 'angle_type': 'θ1'}),\n",
    "        pd.DataFrame({'angle_value': df['θ2'], 'angle_type': 'θ2'}),\n",
    "        pd.DataFrame({'angle_value': df['θ3'], 'angle_type': 'θ3'}),\n",
    "        pd.DataFrame({'angle_value': df['θ4'], 'angle_type': 'θ4'}),\n",
    "    ])\n",
    "    temp_df['condition'] = columns[i]\n",
    "    all_dfs.append(temp_df)\n",
    "\n",
    "final_df = pd.concat(all_dfs, ignore_index=True)\n",
    "final_df = final_df.dropna(subset=['angle_value'])\n",
    "\n",
    "final_df['angle_type'] = final_df['angle_type'].replace({\n",
    "    'θ1': r'$\\theta_1$',\n",
    "    'θ2': r'$\\theta_2$',\n",
    "    'θ3': r'$\\theta_3$',\n",
    "    'θ4': r'$\\theta_4$',\n",
    "})\n",
    "\n",
    "\n",
    "# Plot\n",
    "plt.figure(figsize=(10, 6))\n",
    "\n",
    "sns.boxplot(x = 'condition', y = 'angle_value', hue = 'angle_type', data=final_df)\n",
    "\n",
    "# Optional: overlay swarmplot for data points\n",
    "# sns.swarmplot(x='condition', y='angle_value', hue='angle_type', data=final_df, dodge=True, color=\".25\", size=2)\n",
    "\n",
    "# Beautify the plot\n",
    "plt.rcParams[\"font.family\"] = \"Times New Roman\"\n",
    "plt.rcParams['text.usetex'] = False\n",
    "\n",
    "plt.title(\"Angle Distributions Across Conditions\", fontsize=25, fontname = 'Times New Roman', pad = 20)\n",
    "plt.xlabel(\"Condition\", fontsize=20, labelpad = 15)\n",
    "plt.ylabel(\"Angle Value (°)\", fontsize=20, labelpad = 15)\n",
    "plt.xticks(rotation=15)\n",
    "plt.legend(title=\"Angle Type\", bbox_to_anchor=(1.05, 1), loc='upper left')\n",
    "\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0974a0e-0b96-4c5e-bf68-d2068e4a1c20",
   "metadata": {},
   "source": [
    "# Single Boxplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "960fbfd0-1421-4b29-8242-ec5dd7654149",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Set style and context\n",
    "sns.set_style(\"whitegrid\")\n",
    "sns.set_context(\"talk\", font_scale=1.2)\n",
    "sns.set_palette(\"Set2\")\n",
    "\n",
    "# Combine all DataFrames (same as your code)\n",
    "dfs = [theta_35C_01M, theta_35C_25M, theta_35C_5M, theta_35C_75M, theta_35C_1M]\n",
    "columns = [\"0.1M\", \"0.25M\", \"0.5M\", \"0.75M\", \"1.0M\"]\n",
    "\n",
    "all_dfs = []\n",
    "\n",
    "for i, df in enumerate(dfs):\n",
    "    temp_df = pd.concat([\n",
    "        pd.DataFrame({'angle_value': df['θ1'], 'angle_type': 'θ1'})\n",
    "    ])\n",
    "    temp_df['condition'] = columns[i]\n",
    "    all_dfs.append(temp_df)\n",
    "\n",
    "final_df = pd.concat(all_dfs, ignore_index=True)\n",
    "final_df = final_df.dropna(subset=['angle_value'])\n",
    "\n",
    "final_df['angle_type'] = final_df['angle_type'].replace({\n",
    "    'θ1': r'$\\theta_1$',\n",
    "})\n",
    "\n",
    "\n",
    "# Plot\n",
    "plt.figure(figsize=(10, 6))\n",
    "\n",
    "sns.boxplot(x = 'condition', y = 'angle_value', data=final_df)\n",
    "\n",
    "# Optional: overlay swarmplot for data points\n",
    "# sns.swarmplot(x='condition', y='angle_value', hue='angle_type', data=final_df, dodge=True, color=\".25\", size=2)\n",
    "\n",
    "# Beautify the plot\n",
    "plt.rcParams[\"font.family\"] = \"Times New Roman\"\n",
    "plt.rcParams['text.usetex'] = False\n",
    "\n",
    "plt.title(\"Angle Distributions Across Conditions\", fontsize=25, fontname = 'Times New Roman', pad = 20)\n",
    "plt.xlabel(\"Condition\", fontsize=20, labelpad = 15)\n",
    "plt.ylabel(\"Angle Value (°)\", fontsize=20, labelpad = 15)\n",
    "plt.xticks(rotation=15)\n",
    "# plt.legend(title=\"Angle Type\", bbox_to_anchor=(1.05, 1), loc='upper left')\n",
    "\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca86babb-9de8-4537-912a-fda3733e6c73",
   "metadata": {},
   "source": [
    "# Violin plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "833304a1-6685-4b79-97f2-a3a70aa13363",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(10, 10))\n",
    "\n",
    "sns.violinplot(x = 'condition', y = 'angle_value', data=final_df)\n",
    "\n",
    "# Optional: overlay swarmplot for data points\n",
    "# sns.swarmplot(x='condition', y='angle_value', hue='angle_type', data=final_df, dodge=True, color=\".25\", size=2)\n",
    "\n",
    "# Beautify the plot\n",
    "plt.rcParams[\"font.family\"] = \"Times New Roman\"\n",
    "plt.rcParams['text.usetex'] = False\n",
    "\n",
    "plt.title(\"Angle Distributions Across Conditions\", fontsize=25, fontname = 'Times New Roman', pad = 20)\n",
    "plt.xlabel(\"Condition\", fontsize=20, labelpad = 15)\n",
    "plt.ylabel(\"Angle Value (°)\", fontsize=20, labelpad = 15)\n",
    "plt.xticks(rotation=15)\n",
    "# plt.legend(title=\"Angle Type\", bbox_to_anchor=(1.05, 1), loc='upper left')\n",
    "\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "96fad1d3-4e7d-498f-8e49-f1eeebff01c2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
